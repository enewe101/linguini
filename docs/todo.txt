LEFT OFF:
- Add the ability to run tasks without a runner
- Add the ability to ensure-path-exists for any directory and file resource
	- for directories, it ensures the full directory exists, for files
		only ensures the containing directory (not the file itself) exists.
	- issues a warning if something else is found there which is not a 
		directory
	- for the file it could issue a warning if there is already a file or
		directory occupying the path of the intended file.


- still testing inheritance of clobber
- overhauled inheritance mechanism, but need to test inheritance
	of pilot, clobber, and lot

- how is the completeness of sub-runners handled?  Are they always run, and 
	then their own tasks are checked for completeness?  That would seem to
	be the best, since it gives fine-grained control of what should be run,
	by setting clobber=True right on a sub-runner's task

- need to check that shared subrunners don't get re-run
- ensure that all class variables are copied before use to prevent collisions

- in File resource, use codecs.open, and allow passing a codec
- enable automatically reading/writing gzip by specifying compress='gzip'
	or compress=False options
- fix resolution of until
- finish adding clobber keyword functionality
- ensure that resources don't overwrite files unless in clobber mode
- make it so that folder and file resources make their path if necessary

x Runners have a simpler syntax for specifying tasks and dependencies.

x Runners, Tasks, and resources accept static, share, ignore_pilot
	- share, ignore_pilot, and static
		- static = share + ignore_pilot
		- these can be specified for runners, tasks, and resources.

	- for runners, share means it uses its own lot, and doesn't inherit.
	- for tasks share means that all the resources are run with lot=None
	- for resources, share=True causes the lot to be None

	- for runners, ignore_pilot means that pilot=False, even if the parent
		has pilot=True
	- for tasks, ignore_pilot means that pilot=False, even if the parent
		invoked pilot=True
	- for resources, ignore_pilot means that pilot=False, even if the task
		was invoked with pilot=True

- Consider making default Task:
	- use marker files
	- not require outputs / inputs

x Rename FileResource to File
x Rename FolderResource to Folder 
x Rename as_pilot to pilot

x test that cyclical dependencies are caught
x test that non-existent dependencies are caught



x make marker mixin and baseclass for Tasks
x ensure that inheritance of lot names handled nicely by runners
x add the clobber functionality

x remove lot and as pilot from run -- use get_ready for all inheritance
x don't pass until to get_ready

- test all the parameter setting stuff
- clobber should cause all dependencies to be schedule, regardless of whether
	they are completed

test that inheritance works for all attributes
test that you can't set a non-stringlike to lot
test that a run's outputs are equal to all it's 'END' task's outputs
ditto for inputs
test FolderResource
